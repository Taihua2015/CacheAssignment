## These functions create a matrix 
## and calculate/recall its inverse in cache 

makeCacheMatrix <- function(x = matrix()) {

## it creates a list that uses set, get, setInv
## and getInv functions to store the matrix in cache and
## recall the matrix but in an inverse way
 
        m <- NULL
        set <- function(y){
                x <<- y  
                m <<- NULL  
        }
        get <- function() x
        setInv <- function(solve) m<<- solve 
        getInv <- function() m 
        list(set = set, get = get,
             setInv = setInv,
             getInv = getInv)  
}


## It creates the inverse matrix from the previous function
## but if the inverse matrix has been calculated before, it will
## be pulled out from cache instead of recalculating. Recalculated
## inverse matrix will be stored in the cache as well

cacheSolve <- function(x, ...) {
        m <- x$getInv()                 
        if(!is.null(m)){                   
                message("getting cached data")     
                return(m)                        
        }
        data <- x$get()                    
        m <- solve(data, ...)               
        x$setInv(m)   
}
